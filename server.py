import os
from os.path import join as pjoin
from http.server import HTTPServer, CGIHTTPRequestHandler, BaseHTTPRequestHandler
from io import BytesIO
from urllib.parse import urlparse
import http.server
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import csv


os.chdir('./')

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        name = 'World'
        query_components = parse_qs(urlparse(self.path).query)
        if 'name' in query_components:
            name = query_components["name"][1]

        # Some custom HTML code, possibly generated by another function
        #html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"
        

        if 'link' in query_components and 'comment' in query_components and 'checkbox' in query_components:
            with open('to_download.csv', 'w') as f:
                file = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                file.writerow([query_components['link'][0], query_components['comment'][0], query_components['checkbox'][0]])

        elif 'link' in query_components and 'comment' in query_components:
            with open('to_download.csv', 'w') as f:
                file = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                file.writerow([query_components['link'][0], query_components['comment'][0]])
        else:
            pass
        
        html = str()

        with open("index.html", "r") as f:
            lines = f.readlines()
            for line in lines:
                html += line
 
        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))

    #coment this out to allow server output
    #def log_message(self, format, *args):

        return

# Create an object of the above class
handler_object = MyHttpRequestHandler

PORT = 8080
my_server = socketserver.TCPServer(("", PORT), handler_object)

# Star the server
my_server.serve_forever()